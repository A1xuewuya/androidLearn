
用hander来实现子线程与主线程之间的通信，学会建立子线程完成耗时操作

================环形进度条

package com.example.administrator.test;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TimePicker;
import android.widget.Toast;

import java.util.Calendar;

public class TimeActivity extends AppCompatActivity implements View.OnClickListener {
    private Button btn_date;
    private Button btn_time;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_time);


        btn_date= (Button) findViewById(R.id.btn_date);
        btn_time= (Button) findViewById(R.id.btn_time);

        btn_date.setOnClickListener(this);
        btn_time.setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btn_date:
                Calendar c = Calendar.getInstance();
                // 直接创建一个DatePickerDialog对话框实例，并将它显示出来
                new DatePickerDialog(this,
                        // 绑定监听器
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker dp, int year,
                                                  int month, int dayOfMonth) {
                                String text = "您选择了：" + year + "年" + (month + 1)
                                        + "月" + dayOfMonth + "日";
                                Toast.makeText(TimeActivity.this, text,
                                        Toast.LENGTH_LONG).show();
                            }
                        }
                        //设置初始日期
                        , c.get(Calendar.YEAR)
                        , c.get(Calendar.MONTH)
                        , c.get(Calendar.DAY_OF_MONTH)).show();
                break;
            case R.id.btn_time:
                Calendar d = Calendar.getInstance();
                // 创建一个TimePickerDialog实例，并把它显示出来。
                new TimePickerDialog(this,
                        // 绑定监听器
                        new TimePickerDialog.OnTimeSetListener() {
                            @Override
                            public void onTimeSet(TimePicker tp, int hourOfDay,
                                                  int minute) {
                                String text = "您选择了：" + hourOfDay + "时" + minute
                                        + "分";
                                Toast.makeText(TimeActivity.this, text,
                                        Toast.LENGTH_LONG).show();
                            }
                        }
                        //设置初始时间
                        , d.get(Calendar.HOUR_OF_DAY)
                        , d.get(Calendar.MINUTE)
                        //true表示采用24小时制
                        , true).show();
                break;
        }

    }



}






======================多线程条形进度条




package com.example.administrator.test;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TimePicker;
import android.widget.Toast;

import java.util.Calendar;

public class TimeActivity extends AppCompatActivity implements View.OnClickListener {
    private Button btn_date;
    private Button btn_time;
    private Button btn_progress;

    ProgressDialog pd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_time);


        btn_date= (Button) findViewById(R.id.btn_date);
        btn_time= (Button) findViewById(R.id.btn_time);
        btn_progress= (Button) findViewById(R.id.btn_progress);

        btn_date.setOnClickListener(this);
        btn_time.setOnClickListener(this);

        //声明hander来实现子线程与主线程的通信
        final Handler handler=new Handler(){
            @Override   //重写方法
            public void handleMessage(Message msg) {      //主线程（UI）
                if(msg.what==0){
                    pd.dismiss();
                }
                else if(msg.what==1){
                    pd.setProgress(msg.arg1);
                }

            }
        };


        btn_progress.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showPregress();            //在点击时间里启动进度对话框，同时创建一个子线程
                //新建一个子线程
                new Thread(){
                    @Override
                    public void run() {      //人为制造的耗时操作
                        for (int i=0;i<10;i++){
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            Message msg=Message.obtain();
                            msg.arg1=i;
                            msg.what=1;
                            handler.sendMessage(msg);   //发送实消息
                        }

                        handler.sendEmptyMessage(0);     //发送空消息，在子线程里面
                    }
                }.start();
            }
        });
    }


    public void showPregress(){
        pd=new ProgressDialog(this);
        pd.setTitle("任务执行中");
        pd.setMessage("请稍后.");
        pd.setCancelable(true);
        pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);   //水平进度条
        pd.setMax(10);
        pd.show();
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btn_date:
                Calendar c = Calendar.getInstance();
                // 直接创建一个DatePickerDialog对话框实例，并将它显示出来
                new DatePickerDialog(this,
                        // 绑定监听器
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker dp, int year,
                                                  int month, int dayOfMonth) {
                                String text = "您选择了：" + year + "年" + (month + 1)
                                        + "月" + dayOfMonth + "日";
                                Toast.makeText(TimeActivity.this, text,
                                        Toast.LENGTH_LONG).show();
                            }
                        }
                        //设置初始日期
                        , c.get(Calendar.YEAR)
                        , c.get(Calendar.MONTH)
                        , c.get(Calendar.DAY_OF_MONTH)).show();
                break;
            case R.id.btn_time:
                Calendar d = Calendar.getInstance();
                // 创建一个TimePickerDialog实例，并把它显示出来。
                new TimePickerDialog(this,
                        // 绑定监听器
                        new TimePickerDialog.OnTimeSetListener() {
                            @Override
                            public void onTimeSet(TimePicker tp, int hourOfDay,
                                                  int minute) {
                                String text = "您选择了：" + hourOfDay + "时" + minute
                                        + "分";
                                Toast.makeText(TimeActivity.this, text,
                                        Toast.LENGTH_LONG).show();
                            }
                        }
                        //设置初始时间
                        , d.get(Calendar.HOUR_OF_DAY)
                        , d.get(Calendar.MINUTE)
                        //true表示采用24小时制
                        , true).show();
                break;
        }

    }



}

